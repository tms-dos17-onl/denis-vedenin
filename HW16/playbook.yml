---
- hosts: all
  #connection: local
  become: true
  vars_files:
    - vars/default.yml



  tasks:
    - name: Install prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    - name: Install unzip
      package:
        name: unzip
        state: present


  #Apache Configuration
    - name: Install LAMP Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'apache2-utils', 'python3-pymysql', 'php', php-curl, 'php-mysql', 'php-dev', 'python3-pip', 'libapache2-mod-php' ]

    - name: Create document root
      file:
        path: "/var/www/html/{{ http_host }}"
        state: directory
        owner: "{{ app_user }}"
        mode: '0755'

  # UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp


  # MySQL Configuration
    - name: Install MySQL Server
      ansible.builtin.package:
        name: mysql-server
        state: latest

    - name: Install MySQL Client
      ansible.builtin.package:
        name: mysql-client
        state: latest

    - name: Start MySQL
      service:
        name: mysql
        state: started

    - name: Install community.mysql dependencies
      package:
        name: "{{ item }}"
        state: present

      loop:
        - python3
        - python3-pymysql

    - name: Create Application Database
      community.mysql.mysql_db:
        name: "{{ mysql_db_name }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present

    - name: Create Application DB User
      community.mysql.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_root_password }}"
        priv: "{{ mysql_db_name }}.*:ALL"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present

    # PHP
    - name: Sets Up PHP Info Page
      template:
        src: "files/info.php.j2"
        dest: "/var/www/html/{{ http_host }}/info.php"

    # Installing memcached
    - name: Install memcached
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'libmemcached-tools', 'memcached', 'php-memcached', 'php-cli'  ]

    - name: start and enable memcached service
      service:
        name: memcached
        state: started
        enabled: yes

   # Download app
    - name: Download app package
      ansible.builtin.get_url:
        url: https://github.com/qyjohn/simple-lamp/archive/refs/heads/master.zip
        dest: /tmp/simple-lamp.zip



    - name: Extract app package
      ansible.builtin.unarchive:
        src: /tmp/simple-lamp.zip
        dest: /tmp



    - name: Copy app package to www
      ansible.builtin.copy:
        src: /tmp/simple-lamp-master/
        dest: "/var/www/html/{{ http_host }}"
        owner: www-data
        group: www-data

    - name: Restore SQL database
      community.mysql.mysql_db:
        name: "{{ mysql_db_name }}"
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_root_password }}"
        target: "/var/www/html/{{ http_host }}/simple_lamp.sql"
        state: import

    - name: Copy configuration PHP 
      template:
        src: "files/config.php.j2"
        dest: "/var/www/html/{{ http_host }}/config.php"
      notify: Reload Apache

    #Apache Configuration
    - name: Set up Apache virtualhost
      template:
        src: "files/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache



    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      when: disable_default
      notify: Reload Apache

    - name: Change directory ownership
      ansible.builtin.file:
        path: /var/www/html/{{ http_host }}/uploads
        owner: www-data
        group: www-data

    - name: Set up config.php
      ansible.builtin.template:
        src: "files/config.php.j2"
        dest: "/var/www/html/{{ http_host }}/config.php"

    - name: Setup Apache site
      ansible.builtin.template:
        src: files/apache.conf.j2
        dest: "/etc/apache2/sites-available/{{ http_host }}.conf"

    - name: Enable Apache site
      ansible.builtin.command: "a2ensite {{ http_conf }}"
      notify: Reload Apache

      
  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted